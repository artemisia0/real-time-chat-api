scalar DateTime

type Subscription {
  newMessage(chatID: String!): Message!
}

type Query {
  chats(username: String!): [Chat!]!
  messages(chatID: String!): [Message!]!
  chatMembers(chatID: String!): [ChatMember!]!
}

type Mutation {
	signIn(userCredentials: UserCredentials!): Status!
	signUp(userCredentials: UserCredentials!): Status!
	signOut: Status!

  createChat(name: String!, creatorUsername: String!): CreateChatResponse!
  leaveChat(username: String!, chatID: String!): Status!
  renameChat(chatID: String!, name: String!): Status!

  createMessage(contents: String!, authorUsername: String!, chatID: String!, date: DateTime!): CreateMessageResponse!
  editMessage(messageID: String!, newMessageContents: String!): EditMessageResponse!
  deleteMessage(messageID: String!): DeleteMessageResponse!

  removeChatMember(username: String!, chatID: String!): RemoveChatMemberResponse!
  addChatMember(username: String!, chatID: String!, role: String!): AddChatMemberResponse!
  updateChatMemberRole(username: String!, chatID: String!, role: String!): UpdateChatMemberRoleResponse!
}

type UpdateChatMemberRoleResponse {
  status: Status!
}

type AddChatMemberResponse {
  status: Status!
}

type RemoveChatMemberResponse {
  status: Status!
}

type ChatMember {
  role: String!  # 'admin' | 'member' | 'creator'
  username: String!
}

type CreateMessageResponse {
  status: Status!
  newMessage: Message!
}

type DeleteMessageResponse {
  status: Status!
}

type EditMessageResponse {
  status: Status!
}

input UserCredentials {
	username: String!
	password: String!
}

type Status {
	ok: Boolean!
	message: String!
}

type CreateChatResponse {
  status: Status!
  chat: Chat!
}

type Chat {
  _id: String!
  name: String!
}

type Message {
  contents: String!
  authorUsername: String!
  date: DateTime!
  chatID: String!
  _id: String!
}

